/* tslint:disable */
/* eslint-disable */
/*
Budgets API


The budgets API lets you manage your Brex budgets.


The version of the OpenAPI document: 1.0
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BudgetProgram } from '../models';
// @ts-ignore
import { CreateBudgetBlueprintRequest } from '../models';
// @ts-ignore
import { CreateBudgetProgramRequest } from '../models';
// @ts-ignore
import { CreateBudgetProgramRequestEmployeeFilter } from '../models';
// @ts-ignore
import { PageBudgetProgram } from '../models';
// @ts-ignore
import { UpdateBudgetBlueprintRequest } from '../models';
// @ts-ignore
import { UpdateBudgetProgramRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BudgetProgramsApi - axios parameter creator
 * @export
 */
export const BudgetProgramsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Creates a Budget Program. If your account does not have access to budget program features, a 403 response status will be returned. If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Create Budget Program 
         * @param {string} idempotencyKey 
         * @param {CreateBudgetProgramRequest} createBudgetProgramRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (idempotencyKey: string, createBudgetProgramRequest: CreateBudgetProgramRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('create', 'idempotencyKey', idempotencyKey)
            // verify required parameter 'createBudgetProgramRequest' is not null or undefined
            assertParamExists('create', 'createBudgetProgramRequest', createBudgetProgramRequest)
            const localVarPath = `/v1/budget_programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["budgets"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createBudgetProgramRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/budget_programs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createBudgetProgramRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Retrieves a Budget Program by ID 
         * @summary  Get Budget Program 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/v1/budget_programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["budgets.readonly", "budgets"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/budget_programs/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Lists Budget Programs belonging to this account 
         * @summary  List Budget Programs 
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/budget_programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["budgets.readonly", "budgets"], configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/budget_programs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Delete a Budget Program by ID. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Delete Budget Program 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProgramById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeProgramById', 'id', id)
            const localVarPath = `/v1/budget_programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["budgets"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/budget_programs/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Updates a Budget Program. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Update Budget Program 
         * @param {string} id 
         * @param {string} idempotencyKey 
         * @param {UpdateBudgetProgramRequest} updateBudgetProgramRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProgramById: async (id: string, idempotencyKey: string, updateBudgetProgramRequest: UpdateBudgetProgramRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProgramById', 'id', id)
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('updateProgramById', 'idempotencyKey', idempotencyKey)
            // verify required parameter 'updateBudgetProgramRequest' is not null or undefined
            assertParamExists('updateProgramById', 'updateBudgetProgramRequest', updateBudgetProgramRequest)
            const localVarPath = `/v1/budget_programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["budgets"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateBudgetProgramRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/budget_programs/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateBudgetProgramRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetProgramsApi - functional programming interface
 * @export
 */
export const BudgetProgramsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetProgramsApiAxiosParamCreator(configuration)
    return {
        /**
         *  Creates a Budget Program. If your account does not have access to budget program features, a 403 response status will be returned. If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Create Budget Program 
         * @param {BudgetProgramsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: BudgetProgramsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetProgram>> {
            const createBudgetProgramRequest: CreateBudgetProgramRequest = {
                description: requestParameters.description,
                existing_budget_ids: requestParameters.existing_budget_ids,
                budget_blueprints: requestParameters.budget_blueprints,
                employee_filter: requestParameters.employee_filter,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.idempotencyKey, createBudgetProgramRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Retrieves a Budget Program by ID 
         * @summary  Get Budget Program 
         * @param {BudgetProgramsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: BudgetProgramsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetProgram>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Lists Budget Programs belonging to this account 
         * @summary  List Budget Programs 
         * @param {BudgetProgramsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: BudgetProgramsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBudgetProgram>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Delete a Budget Program by ID. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Delete Budget Program 
         * @param {BudgetProgramsApiRemoveProgramByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProgramById(requestParameters: BudgetProgramsApiRemoveProgramByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetProgram>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProgramById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Updates a Budget Program. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Update Budget Program 
         * @param {BudgetProgramsApiUpdateProgramByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProgramById(requestParameters: BudgetProgramsApiUpdateProgramByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetProgram>> {
            const updateBudgetProgramRequest: UpdateBudgetProgramRequest = {
                description: requestParameters.description,
                existing_budget_ids: requestParameters.existing_budget_ids,
                budget_blueprints: requestParameters.budget_blueprints,
                employee_filter: requestParameters.employee_filter,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProgramById(requestParameters.id, requestParameters.idempotencyKey, updateBudgetProgramRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BudgetProgramsApi - factory interface
 * @export
 */
export const BudgetProgramsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetProgramsApiFp(configuration)
    return {
        /**
         *  Creates a Budget Program. If your account does not have access to budget program features, a 403 response status will be returned. If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Create Budget Program 
         * @param {BudgetProgramsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: BudgetProgramsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<BudgetProgram> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Retrieves a Budget Program by ID 
         * @summary  Get Budget Program 
         * @param {BudgetProgramsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: BudgetProgramsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BudgetProgram> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Lists Budget Programs belonging to this account 
         * @summary  List Budget Programs 
         * @param {BudgetProgramsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: BudgetProgramsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PageBudgetProgram> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Delete a Budget Program by ID. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Delete Budget Program 
         * @param {BudgetProgramsApiRemoveProgramByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProgramById(requestParameters: BudgetProgramsApiRemoveProgramByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BudgetProgram> {
            return localVarFp.removeProgramById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Updates a Budget Program. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
         * @summary  Update Budget Program 
         * @param {BudgetProgramsApiUpdateProgramByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProgramById(requestParameters: BudgetProgramsApiUpdateProgramByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BudgetProgram> {
            return localVarFp.updateProgramById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in BudgetProgramsApi.
 * @export
 * @interface BudgetProgramsApiCreateRequest
 */
export type BudgetProgramsApiCreateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BudgetProgramsApiCreate
    */
    readonly idempotencyKey: string
    
} & CreateBudgetProgramRequest

/**
 * Request parameters for getById operation in BudgetProgramsApi.
 * @export
 * @interface BudgetProgramsApiGetByIdRequest
 */
export type BudgetProgramsApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BudgetProgramsApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for list operation in BudgetProgramsApi.
 * @export
 * @interface BudgetProgramsApiListRequest
 */
export type BudgetProgramsApiListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BudgetProgramsApiList
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof BudgetProgramsApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeProgramById operation in BudgetProgramsApi.
 * @export
 * @interface BudgetProgramsApiRemoveProgramByIdRequest
 */
export type BudgetProgramsApiRemoveProgramByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BudgetProgramsApiRemoveProgramById
    */
    readonly id: string
    
}

/**
 * Request parameters for updateProgramById operation in BudgetProgramsApi.
 * @export
 * @interface BudgetProgramsApiUpdateProgramByIdRequest
 */
export type BudgetProgramsApiUpdateProgramByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BudgetProgramsApiUpdateProgramById
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof BudgetProgramsApiUpdateProgramById
    */
    readonly idempotencyKey: string
    
} & UpdateBudgetProgramRequest

/**
 * BudgetProgramsApiGenerated - object-oriented interface
 * @export
 * @class BudgetProgramsApiGenerated
 * @extends {BaseAPI}
 */
export class BudgetProgramsApiGenerated extends BaseAPI {
    /**
     *  Creates a Budget Program. If your account does not have access to budget program features, a 403 response status will be returned. If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @summary  Create Budget Program 
     * @param {BudgetProgramsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetProgramsApiGenerated
     */
    public create(requestParameters: BudgetProgramsApiCreateRequest, options?: AxiosRequestConfig) {
        return BudgetProgramsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Retrieves a Budget Program by ID 
     * @summary  Get Budget Program 
     * @param {BudgetProgramsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetProgramsApiGenerated
     */
    public getById(requestParameters: BudgetProgramsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return BudgetProgramsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Lists Budget Programs belonging to this account 
     * @summary  List Budget Programs 
     * @param {BudgetProgramsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetProgramsApiGenerated
     */
    public list(requestParameters: BudgetProgramsApiListRequest = {}, options?: AxiosRequestConfig) {
        return BudgetProgramsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Delete a Budget Program by ID. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @summary  Delete Budget Program 
     * @param {BudgetProgramsApiRemoveProgramByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetProgramsApiGenerated
     */
    public removeProgramById(requestParameters: BudgetProgramsApiRemoveProgramByIdRequest, options?: AxiosRequestConfig) {
        return BudgetProgramsApiFp(this.configuration).removeProgramById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Updates a Budget Program. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @summary  Update Budget Program 
     * @param {BudgetProgramsApiUpdateProgramByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetProgramsApiGenerated
     */
    public updateProgramById(requestParameters: BudgetProgramsApiUpdateProgramByIdRequest, options?: AxiosRequestConfig) {
        return BudgetProgramsApiFp(this.configuration).updateProgramById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
